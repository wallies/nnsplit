name: CI

on:
  release:
    types: [published]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-audit:
    permissions:
      contents: read # for actions/checkout to fetch code
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
      with:
        egress-policy: audit
        allowed-endpoints: >
          api.github.com:443
          github.com:443
          objects.githubusercontent.com:443
          ghcr.io:443
          pkg-containers.githubusercontent.com:443

    - name: Checkout the code
      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v2
      with:
        fetch-depth: 0

    - name: Run vulnerability scanner in repo mode
      if: github.actor != 'dependabot[bot]'
      uses: aquasecurity/trivy-action@8bd2f9fbda2109502356ff8a6a89da55b1ead252 # 0.2.2
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'table'
        vuln-type: 'library'
        severity: 'CRITICAL,HIGH'
        security-checks: 'vuln,config,secret'

    - name: Run vulnerability scanner in repo mode
      if: github.actor == 'dependabot[bot]'
      uses: aquasecurity/trivy-action@8bd2f9fbda2109502356ff8a6a89da55b1ead252 # 0.2.2
      with:
        scan-type: 'fs'
        ignore-unfixed: false
        format: 'table'
        vuln-type: 'library'
        severity: 'HIGH,CRITICAL'
        security-checks: 'vuln,config,secret'

  build-javascript:
    needs: security-audit
    runs-on: ubuntu-latest
    env:
      working-directory: bindings/javascript
    strategy:
      matrix:
        browser: ["firefox", "chrome", "electron"]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            actions-results-receiver-production.githubapp.com:443
            api.github.com:443
            cdn.cypress.io:443
            content-signature-2.cdn.mozilla.net:443
            crates.io:443
            download.cypress.io:443
            firefox-settings-attachments.cdn.mozilla.net:443
            firefox.settings.services.mozilla.com:443
            github.com:443
            location.services.mozilla.com:443
            objects.githubusercontent.com:443
            ocsp.digicert.com:80
            r3.o.lencr.org:80
            registry.npmjs.org:443
            shavar.services.mozilla.com:443
            static.crates.io:443
            static.rust-lang.org:443
            tracking-protection.cdn.mozilla.net:443

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: stable

      - name: Install wasm-pack # need a build from master for https://github.com/rustwasm/wasm-pack/pull/839
        run: cargo install --git https://github.com/rustwasm/wasm-pack --rev d46d1c6

      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v2-beta
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install
        working-directory: ${{env.working-directory}}

      - name: Build module
        run: npm run build
        working-directory: ${{env.working-directory}}

      - name: Run Node.js tests
        run: npm run test:node
        working-directory: ${{env.working-directory}}

      - name: Run Cypress tests
        uses: cypress-io/github-action@ca3f666049f4ac2267a75de769535a7cbdc7bfd7 # v5.0.8
        with:
          working-directory: ${{env.working-directory}}
          start: npm run start_test_server
          wait-on: "http://localhost:8080"
          browser: ${{ matrix.browser }}


  build-rust:
    needs: security-audit
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            crates.io:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            static.crates.io:443

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Cache cargo registry
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812 # v3.2.5
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812 # v3.2.5
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812 # v3.2.5
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: build
          args: --verbose

      - run: rustup component add clippy
      - run: cargo clean
      - run: cargo clippy --all-features

      - uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: test
          args: --verbose --all-features

  python-macos:
    needs: security-audit
    runs-on: macos-latest
    env:
      working-directory: bindings/python
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            crates.io:443
            github.com:443
            static.crates.io:443
            pypi.org:443
            files.pythonhosted.org:443
            quay.io:443
            cdn03.quay.io:443
            sh.rustup.rs:443
            static.rust-lang.org:443
            objects.githubusercontent.com:443

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: '3.10'

      - name: Install GSED (if needed) # needed by update_version.sh
        if: github.event_name == 'release'
        run: |
          brew install gnu-sed

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Update version (if release) # only needed for python since we store artifacts, others are rebuilt
        if: github.event_name == 'release'
        run: |
          bash update_version.sh ${{ github.event.release.tag_name }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          make install
        working-directory: ${{env.working-directory}}

      - name: Move cargo build to cargo toml
        run: |
          mv Cargo.toml Cargo.temp
          cp Cargo.build.toml Cargo.toml
        working-directory: ${{env.working-directory}}

      - name: Build wheels - x86_64
        uses: messense/maturin-action@59e476bfb6fd6e071aaa1cf62bc573e10cdac221
        with:
          target: x86_64-apple-darwin
          args: --release --out dist --sdist
          maturin-version: 0.12.10
          working-directory: ${{env.working-directory}}

      - name: Install built wheel - x86_64
        run: |
          mv Cargo.temp Cargo.toml
          pip install auditwheel-symbols --no-index --find-links dist --force-reinstall
          auditwheel-symbols --help
          make test
        working-directory: ${{env.working-directory}}

      - name: Build wheels - universal2
        uses: messense/maturin-action@59e476bfb6fd6e071aaa1cf62bc573e10cdac221
        with:
          args: --release --universal2 --out dist
          maturin-version: 0.12.10
          working-directory: ${{env.working-directory}}

      - name: Install built wheel - universal2
        run: |
          mv Cargo.temp Cargo.toml
          pip install auditwheel-symbols --no-index --find-links dist --force-reinstall
          auditwheel-symbols --help
          make test
        working-directory: ${{env.working-directory}}

      - name: Upload wheels
        if: github.event_name == 'release'
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: python-wheel
          path: bindings/python/dist/*

  python-windows:
    needs: security-audit
    runs-on: windows-latest
    env:
      working-directory: bindings/python
    strategy:
      matrix:
        platform: [
          { python-architecture: "x64", target: "x86_64-pc-windows-msvc" },
          { python-architecture: "x86", target: "i686-pc-windows-msvc" },
        ]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            crates.io:443
            github.com:443
            static.crates.io:443
            pypi.org:443
            files.pythonhosted.org:443
            quay.io:443
            cdn03.quay.io:443
            sh.rustup.rs:443
            static.rust-lang.org:443
            objects.githubusercontent.com:443

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: 3.8
          architecture: ${{ matrix.platform.python-architecture }}

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Update version (if release) # only needed for python since we store artifacts, others are rebuilt
        if: github.event_name == 'release'
        run: |
          bash update_version.sh ${{ github.event.release.tag_name }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          make install
        working-directory: ${{env.working-directory}}

      - name: Move cargo build to cargo toml
        run: |
          mv Cargo.toml Cargo.temp
          cp Cargo.build.toml Cargo.toml
        working-directory: ${{env.working-directory}}

      - name: Build wheels
        uses: messense/maturin-action@59e476bfb6fd6e071aaa1cf62bc573e10cdac221
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          maturin-version: 0.12.10
          working-directory: ${{env.working-directory}}

      - name: Install built wheel
        run: |
          rm Cargo.toml
          mv Cargo.temp Cargo.toml
          pip install auditwheel-symbols --no-index --find-links dist --force-reinstall
          auditwheel-symbols --help
          make test
        working-directory: ${{env.working-directory}}

      - name: Upload wheels
        if: github.event_name == 'release'
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: python-wheel
          path: bindings/python/dist/*

  python-linux:
    needs: security-audit
    runs-on: ubuntu-latest
    env:
      working-directory: bindings/python
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl",  python-architecture: "x64", manylinux: "auto" },
          { target: "aarch64-unknown-linux-musl", python-architecture: "aarch64", manylinux: "musllinux_1_1" },
        ]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            crates.io:443
            github.com:443
            static.crates.io:443
            pypi.org:443
            files.pythonhosted.org:443
            quay.io:443
            cdn03.quay.io:443
            sh.rustup.rs:443
            static.rust-lang.org:443
            objects.githubusercontent.com:443

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: 3.8
          architecture: ${{ matrix.platform.python-architecture }}

      - name: Update version (if release) # only needed for python since we store artifacts, others are rebuilt
        if: github.event_name == 'release'
        run: |
          bash update_version.sh ${{ github.event.release.tag_name }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          make install
        working-directory: ${{env.working-directory}}

      - name: Move cargo build to cargo toml
        run: |
          mv Cargo.toml Cargo.temp
          cp Cargo.build.toml Cargo.toml
        working-directory: ${{env.working-directory}}

      - name: Build Wheels - manylinux
        uses: messense/maturin-action@59e476bfb6fd6e071aaa1cf62bc573e10cdac221
        with:
          manylinux: ${{ matrix.platform.manylinux }}
          command: build
          target: ${{ matrix.platform.target }}
          args: --release --sdist -o dist -i python3.8
          maturin-version: 0.12.10
          working-directory: ${{env.working-directory}}

      - name: Upload wheels
        if: github.event_name == 'release'
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: python-wheel
          path: bindings/python/dist/*


  python-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-javascript, build-rust, python-macos, python-windows, python-linux ]
    permissions:
      contents: write # To add assets to a release.
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@18bf8ad2ca49c14cbb28b91346d626ccfb00c518 # v2.1.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ github.head_ref }}

      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: stable

      - name: Set up Python 3.8
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: 3.8

      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: python-wheel
          path: python-wheel

      - name: Update version
        run: |
          bash update_version.sh ${{ github.event.release.tag_name }}

      - name: Upload release binaries
        uses: alexellis/upload-assets@259de5111cb56966d046ced998941e93f91d2c93
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./python-wheel/nnsplit-*"]'
